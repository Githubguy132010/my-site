---
const navItems = [
  { label: "~/home", href: "/", command: "cd ~" },
  { label: "./about", href: "/about", command: "cat about.txt" },
  { label: "./blog", href: "/blog", command: "ls -la posts/" },
  { label: "./projects", href: "/projects", command: "ls projects/" },
  { label: "./contact", href: "/contact", command: "ping contact" },
];

const currentPath = Astro.url.pathname;
---

<nav class="terminal-nav">
  <div class="nav-prompt">
    <span class="user">thomas@brugman.dev</span>
    <span class="separator">:</span>
    <span class="path">~</span>
    <span class="prompt">$</span>
  </div>
  
  <ul class="nav-commands">
    {navItems.map((item) => (
      <li class="nav-item">
        <a 
          href={item.href} 
          class={`nav-link ${currentPath === item.href || (item.href === '/blog' && currentPath.startsWith('/blog')) ? 'active' : ''}`}
          data-command={item.command}
        >
          <span class="command-prefix">></span>
          <span class="command-text">{item.label}</span>
        </a>
      </li>
    ))}
  </ul>
  
  <div class="theme-toggle">
    <button class="theme-btn" id="theme-toggle">
      <span class="sr-only">Toggle theme</span>
      <span class="theme-icon">âš¡</span>
    </button>
  </div>
</nav>

<script>
  // Theme toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    const html = document.documentElement;
    
    // Check for saved theme preference or default to 'dark'
    const currentTheme = localStorage.getItem('theme') || 'dark';
    html.setAttribute('data-theme', currentTheme);
    
    themeToggle?.addEventListener('click', () => {
      const currentTheme = html.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      html.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
    });
  });
</script>

<style>
  .terminal-nav {
    @apply fixed top-0 left-0 right-0 z-50;
    @apply bg-terminal-bg-secondary/90 backdrop-blur-md;
    @apply border-b border-terminal-green-dim;
    @apply flex items-center justify-between px-6 py-3;
  }
  
  .nav-prompt {
    @apply flex items-center space-x-1 text-terminal-green-primary font-mono text-sm;
  }
  
  .user { 
    @apply text-terminal-green-accent; 
  }
  
  .separator { 
    @apply text-terminal-text-dim; 
  }
  
  .path { 
    @apply text-terminal-info; 
  }
  
  .prompt { 
    @apply text-terminal-green-primary; 
  }
  
  .nav-commands {
    @apply flex items-center space-x-6;
  }
  
  .nav-link {
    @apply flex items-center space-x-2 text-terminal-text-secondary;
    @apply hover:text-terminal-green-primary transition-colors duration-200;
    @apply relative;
  }
  
  .nav-link.active {
    @apply text-terminal-green-primary;
  }
  
  .command-prefix {
    @apply text-terminal-green-dim;
  }
  
  .command-text {
    @apply relative;
  }
  
  .nav-link:hover .command-text::after,
  .nav-link.active .command-text::after {
    content: '';
    @apply absolute bottom-0 left-0 w-full h-0.5;
    @apply bg-terminal-green-primary;
    animation: underline-expand 0.3s ease-out forwards;
  }
  
  @keyframes underline-expand {
    from { width: 0; }
    to { width: 100%; }
  }
  
  .theme-btn {
    @apply p-2 rounded border border-terminal-green-dim;
    @apply bg-terminal-bg-tertiary text-terminal-green-primary;
    @apply hover:bg-terminal-green-primary hover:text-terminal-bg-primary;
    @apply transition-all duration-200;
  }
  
  .sr-only {
    @apply absolute w-px h-px p-0 -m-px overflow-hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>